# Algorithm
===========

Begin with all entities in a single cluster node and use graph grammars to split 
entities into multiple cluster nodes.
At every split, entities in original cluster node  must be distributed between
the 2 new cluster nodes.
2 entities are randomly chosen and 1 is placed in each of the new cluster nodes.
The rest of the entities are selected randomly and placed greedily in a cluster node.

During each iteration, each cluster node is split multiple times, and the 
split that improves the score the most is accepted.

===========






masterrun.m
----------- 

(Source)
==
The top level file is masterrun.m. Type 

>> masterrun

and the code will fit three forms (chain, ring and tree) to three data
sets. If 'neato' is installed (part of the GraphViz package -- see below)
then one figure window will show the progress of the current search, and a
second will show the best solution found for the data set most recently
analyzed.

To run other analyses, edit masterrun.m to specify the structures and data
sets you want to explore, and the number of times to run each analysis.
==

Calls runmodel.m

-----------

runmodel.m
----------

Called by masterrun.m.

(Source)
==
function [ll, graph, names, bestglls, bestgraph] = 
runmodel(ps, sind, dind, rind, savefile)

% Given data set DIND, find the best instance of form SIND. 
%   PS:	      parameter structure with hyperparameters, etc
%   RIND:     which repeat is this?
%   SAVEFILE: where to save interim results
% Output:
%   LL:	       log probability of the best structure found
%   GRAPH:     the best structure found
%   BESTGLLS:  log probabilities of the structures explored along the way
%   BESTGRAPH: structures explored along the way
==

Calls relgraphinit.m.

----------

relgraphinit.m
--------------

(Source)
==
function graph = relgraphinit(data, z, ps)

% Create initial graph for relational data set DATA by using various
% heuristics
==

--------------

split_node.m
------------

(Source)
==
function [graph, c1, c2] = split_node(graph, compind, c, pind, part1, part2, ps)

% split node C in component CIND using production PIND and put PART1 and PART2
% in the two children
==


------------